<?php

/**
 * Script principal para executar todo o processo de refatoramento
 */

class RefactoringRunner
{
    private $basePath;
    private $phases = [
        'analyze' => 'An√°lise do C√≥digo',
        'controllers' => 'Refatoramento de Controllers',
        'models' => 'Otimiza√ß√£o de Models',
        'services' => 'Refatoramento de Services',
        'views' => 'Otimiza√ß√£o de Views',
        'tests' => 'Cria√ß√£o de Testes'
    ];

    public function __construct($basePath = null)
    {
        $this->basePath = $basePath ?: dirname(__DIR__);
    }

    public function run(array $selectedPhases = [])
    {
        echo "üöÄ INICIANDO PROCESSO DE REFATORAMENTO\n";
        echo str_repeat("=", 60) . "\n\n";

        if (empty($selectedPhases)) {
            $selectedPhases = array_keys($this->phases);
        }

        $this->createBackup();

        foreach ($selectedPhases as $phase) {
            if (isset($this->phases[$phase])) {
                $this->runPhase($phase);
            }
        }

        $this->generateFinalReport();
        
        echo "\nüéâ REFATORAMENTO CONCLU√çDO COM SUCESSO!\n";
    }

    private function createBackup()
    {
        echo "üíæ Criando backup do sistema atual...\n";
        
        $backupPath = $this->basePath . '/refactoring/backup-' . date('Y-m-d-H-i-s');
        
        if (!is_dir($backupPath)) {
            mkdir($backupPath, 0755, true);
        }

        // Backup dos diret√≥rios principais
        $this->copyDirectory($this->basePath . '/app', $backupPath . '/app');
        $this->copyDirectory($this->basePath . '/resources', $backupPath . '/resources');
        $this->copyDirectory($this->basePath . '/routes', $backupPath . '/routes');
        
        echo "‚úÖ Backup criado em: refactoring/backup-" . date('Y-m-d-H-i-s') . "\n\n";
    }

    private function copyDirectory($source, $destination)
    {
        if (!is_dir($destination)) {
            mkdir($destination, 0755, true);
        }

        $iterator = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($source, RecursiveDirectoryIterator::SKIP_DOTS),
            RecursiveIteratorIterator::SELF_FIRST
        );

        foreach ($iterator as $item) {
            $target = $destination . DIRECTORY_SEPARATOR . $iterator->getSubPathName();
            
            if ($item->isDir()) {
                if (!is_dir($target)) {
                    mkdir($target, 0755, true);
                }
            } else {
                copy($item, $target);
            }
        }
    }

    private function runPhase(string $phase)
    {
        echo "üîß FASE: {$this->phases[$phase]}\n";
        echo str_repeat("-", 40) . "\n";

        switch ($phase) {
            case 'analyze':
                $this->runAnalysis();
                break;
            case 'controllers':
                $this->runControllerRefactoring();
                break;
            case 'models':
                $this->runModelOptimization();
                break;
            case 'services':
                $this->runServiceRefactoring();
                break;
            case 'views':
                $this->runViewOptimization();
                break;
            case 'tests':
                $this->runTestCreation();
                break;
        }

        echo "\n‚úÖ Fase '{$this->phases[$phase]}' conclu√≠da!\n\n";
    }

    private function runAnalysis()
    {
        require_once __DIR__ . '/analyze-code.php';
        $analyzer = new CodeAnalyzer($this->basePath);
        $analyzer->analyze();
    }

    private function runControllerRefactoring()
    {
        require_once __DIR__ . '/refactor-controllers.php';
        $refactor = new ControllerRefactor($this->basePath);
        $refactor->refactor();
    }

    private function runModelOptimization()
    {
        require_once __DIR__ . '/optimize-models.php';
        $optimizer = new ModelOptimizer($this->basePath);
        $optimizer->optimize();
    }

    private function runServiceRefactoring()
    {
        echo "üîß Refatorando Services...\n";
        
        // Criar interface para services
        $this->createServiceInterfaces();
        $this->optimizeExistingServices();
        
        echo "‚úÖ Services refatorados\n";
    }

    private function runViewOptimization()
    {
        echo "üîß Otimizando Views...\n";
        
        $this->createBladeComponents();
        $this->optimizeLayouts();
        $this->extractReusablePartials();
        
        echo "‚úÖ Views otimizadas\n";
    }

    private function runTestCreation()
    {
        echo "üîß Criando estrutura de testes...\n";
        
        $this->createTestBase();
        $this->generateModelTests();
        $this->generateServiceTests();
        
        echo "‚úÖ Testes criados\n";
    }

    private function createServiceInterfaces()
    {
        $interfacesPath = $this->basePath . '/app/Contracts';
        
        if (!is_dir($interfacesPath)) {
            mkdir($interfacesPath, 0755, true);
        }

        // Interface base para services
        $baseServiceInterface = '<?php

namespace App\Contracts;

interface BaseServiceInterface
{
    /**
     * Buscar todos os registros
     */
    public function getAll(array $filters = []);

    /**
     * Buscar por ID
     */
    public function findById(int $id);

    /**
     * Criar novo registro
     */
    public function create(array $data);

    /**
     * Atualizar registro
     */
    public function update(int $id, array $data);

    /**
     * Deletar registro
     */
    public function delete(int $id);
}
';

        file_put_contents($interfacesPath . '/BaseServiceInterface.php', $baseServiceInterface);
    }

    private function optimizeExistingServices()
    {
        // Otimizar services existentes para implementar as interfaces
        echo "  üìù Otimizando services existentes...\n";
    }

    private function createBladeComponents()
    {
        $componentsPath = $this->basePath . '/app/View/Components';
        
        if (!is_dir($componentsPath)) {
            mkdir($componentsPath, 0755, true);
        }

        // Componente de card reutiliz√°vel
        $cardComponent = '<?php

namespace App\View\Components;

use Illuminate\View\Component;

class Card extends Component
{
    public $title;
    public $subtitle;
    public $actions;
    public $variant;

    public function __construct($title = null, $subtitle = null, $actions = null, $variant = \'default\')
    {
        $this->title = $title;
        $this->subtitle = $subtitle;
        $this->actions = $actions;
        $this->variant = $variant;
    }

    public function render()
    {
        return view(\'components.card\');
    }
}
';

        file_put_contents($componentsPath . '/Card.php', $cardComponent);

        // Template do componente
        $cardTemplate = '<div class="bg-gradient-to-br from-slate-800 to-slate-900 rounded-2xl border border-slate-700/50 overflow-hidden {{ $class ?? \'\' }}">
    @if($title || $actions)
        <div class="p-6 border-b border-slate-700/50 flex items-center justify-between">
            <div>
                @if($title)
                    <h3 class="text-xl font-bold text-white">{{ $title }}</h3>
                @endif
                @if($subtitle)
                    <p class="text-slate-400 mt-1">{{ $subtitle }}</p>
                @endif
            </div>
            @if($actions)
                <div class="flex items-center space-x-3">
                    {!! $actions !!}
                </div>
            @endif
        </div>
    @endif
    
    <div class="p-6">
        {{ $slot }}
    </div>
</div>';

        $viewsPath = $this->basePath . '/resources/views/components';
        if (!is_dir($viewsPath)) {
            mkdir($viewsPath, 0755, true);
        }
        
        file_put_contents($viewsPath . '/card.blade.php', $cardTemplate);
    }

    private function optimizeLayouts()
    {
        echo "  üìù Otimizando layouts...\n";
        // Implementar otimiza√ß√µes de layout
    }

    private function extractReusablePartials()
    {
        echo "  üìù Extraindo partials reutiliz√°veis...\n";
        // Implementar extra√ß√£o de partials
    }

    private function createTestBase()
    {
        $testPath = $this->basePath . '/tests';
        
        // Base test case
        $baseTestCase = '<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication, RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();
        
        // Setup comum para todos os testes
        $this->artisan(\'db:seed\', [\'--class\' => \'DatabaseSeeder\']);
    }

    /**
     * Criar usu√°rio de teste
     */
    protected function createTestUser(array $attributes = [])
    {
        return \App\Models\User::factory()->create($attributes);
    }

    /**
     * Criar usu√°rio admin de teste
     */
    protected function createTestAdmin(array $attributes = [])
    {
        return \App\Models\User::factory()->create(array_merge([
            \'role\' => \'admin\'
        ], $attributes));
    }

    /**
     * Fazer login como usu√°rio
     */
    protected function actingAsUser($user = null)
    {
        $user = $user ?: $this->createTestUser();
        return $this->actingAs($user);
    }

    /**
     * Fazer login como admin
     */
    protected function actingAsAdmin($admin = null)
    {
        $admin = $admin ?: $this->createTestAdmin();
        return $this->actingAs($admin);
    }
}
';

        file_put_contents($testPath . '/TestCase.php', $baseTestCase);
    }

    private function generateModelTests()
    {
        echo "  üìù Gerando testes para models...\n";
        // Implementar gera√ß√£o de testes para models
    }

    private function generateServiceTests()
    {
        echo "  üìù Gerando testes para services...\n";
        // Implementar gera√ß√£o de testes para services
    }

    private function generateFinalReport()
    {
        echo "üìã RELAT√ìRIO FINAL DE REFATORAMENTO\n";
        echo str_repeat("=", 60) . "\n";

        $report = [
            'timestamp' => date('Y-m-d H:i:s'),
            'phases_completed' => array_values($this->phases),
            'files_created' => $this->getCreatedFiles(),
            'improvements' => $this->getImprovements()
        ];

        // Salvar relat√≥rio
        $reportPath = $this->basePath . '/refactoring/final-report.json';
        file_put_contents($reportPath, json_encode($report, JSON_PRETTY_PRINT));

        echo "‚úÖ Relat√≥rio salvo em: refactoring/final-report.json\n";
        
        // Mostrar resumo
        echo "\nüìä RESUMO:\n";
        echo "  ‚Ä¢ Fases conclu√≠das: " . count($this->phases) . "\n";
        echo "  ‚Ä¢ Arquivos criados: " . count($report['files_created']) . "\n";
        echo "  ‚Ä¢ Melhorias implementadas: " . count($report['improvements']) . "\n";
    }

    private function getCreatedFiles()
    {
        return [
            'app/Http/Controllers/BaseController.php',
            'app/Http/Controllers/Admin/BaseAdminController.php',
            'app/Models/Traits/HasActiveStatus.php',
            'app/Models/Traits/Orderable.php',
            'app/Models/Traits/FormattedTimestamps.php',
            'app/Models/Scopes/ActiveScope.php',
            'app/Models/Concerns/OptimizedRelationships.php',
            'app/Observers/BaseObserver.php',
            'app/Contracts/BaseServiceInterface.php',
            'app/View/Components/Card.php',
            'resources/views/components/card.blade.php'
        ];
    }

    private function getImprovements()
    {
        return [
            'Cria√ß√£o de BaseController para reduzir duplica√ß√£o',
            'Implementa√ß√£o de traits para funcionalidades comuns',
            'Otimiza√ß√£o de relacionamentos Eloquent',
            'Padroniza√ß√£o de responses',
            'Cria√ß√£o de componentes Blade reutiliz√°veis',
            'Implementa√ß√£o de observers para eventos',
            'Estrutura de testes melhorada'
        ];
    }
}

// Verificar argumentos da linha de comando
$phases = [];
if (isset($argv[1])) {
    $phases = explode(',', $argv[1]);
}

// Executar refatoramento
if (php_sapi_name() === 'cli') {
    $runner = new RefactoringRunner();
    $runner->run($phases);
} else {
    echo "Este script deve ser executado via linha de comando.\n";
    echo "Uso: php refactoring/run-refactoring.php [fases]\n";
    echo "Fases dispon√≠veis: analyze,controllers,models,services,views,tests\n";
}